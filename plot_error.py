
'''
#Run for T = 500:500:10K
#Each run for 20 times

#For each run - record 
#1. our mistakes, our abstentions
#2. Opt mistakes, abst of opt mistake maker
#3. Mistake-matched abstentions, mistakes of this.

#Statistics
#1. M_t = avg_over_runs(our mistakes - opt mistakes), A_t = avg_over_runs(our abstentions - abst of opt mistake maker)
#2. Extra abstentions =  avg_over_runs(our abstentions - mistake-matched-abstention)
'''

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import math
import time
import logging
import random
from datetime import datetime
import json
import shutil
from timeit import default_timer as timer

import matplotlib.pyplot as plt

import multiprocessing
import numpy as np
import pickle
import config
import argparse
#from combine_one_sided_models import post_processing_mix_match_one_sided_models_same_lambda_th

import sys
version = sys.version_info

config = config.get_config()
classes = list(range(0,10))
mus = np.linspace(0.1,3,30)
#thresholds = [0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.88, 0.9];
#thresholds = np.linspace(0.05,0.95,100)
thresholds = np.linspace(0.8,0.95,20)
print('Config = ', config)
print('Mus = ', mus)


def compute_error_bars( Ts, runs, return_stats, label='exp-1-' ):

    Xs = []
    Y1, Y2, Y3, Y4 = [], [], [], []
    err_Y1, err_Y2, err_Y3, err_Y4 = [], [], [], []
    print('\nCompiling results..\n')
    for T in Ts:
        Xs.append(T)

        m_t, a_t, extra_a_t, extra_m_t, valid_runs = 0, 0, 0, 0, 0
        A_mt, A_at, A_ex_at, A_ex_mt = [], [], [], []
        for process_id in runs:
           key = str(T) + '-r-' + str(process_id)
           if key in return_stats:
               valid_runs += 1
               stats = return_stats[key]

               algo_error, algo_abstained = stats[0], stats[1]
               optimal_mistakes, optimal_abstained = stats[2], stats[3]
               mma_mis, mistake_matched_abs = stats[4], stats[5]
               amm_mis, amm_abs = stats[6], stats[7]

               m_t += ( algo_error - optimal_mistakes ) 
               a_t += ( algo_abstained - optimal_abstained )
               extra_a_t += ( algo_abstained - mistake_matched_abs )
               extra_m_t += ( algo_error - amm_mis )


               A_mt.append( algo_error - optimal_mistakes )
               A_at.append( algo_abstained - optimal_abstained )
               A_ex_at.append( algo_abstained - mistake_matched_abs )
               A_ex_mt.append( algo_error - amm_mis )

        m_t /= valid_runs
        a_t /= valid_runs
        extra_a_t /= valid_runs
        extra_m_t /= valid_runs

        Y1.append(m_t)
        Y2.append(a_t)
        Y3.append(extra_a_t)
        Y4.append(extra_m_t)
        
        std_mt = np.std( A_mt )
        std_at = np.std( A_at )
        std_ex_at = np.std( A_ex_at )
        std_ex_mt = np.std( A_ex_mt )

        err_Y1.append( std_mt )
        err_Y2.append( std_at )
        err_Y3.append( std_ex_at)
        err_Y4.append( std_ex_mt)

        pm = u"\u00B1"
        print('\t\tT=', T, ', m_t=', m_t, pm, std_mt, 
                           ', a_t=', a_t, pm, std_at,
                           ', extra_a_t=', extra_a_t, pm, std_ex_at,
                           ', extra_m_t=', extra_m_t, pm, std_ex_mt)


    fig = plt.figure()
    plt.errorbar(Xs, Y1, yerr=err_Y1, label='m_t')
    plt.errorbar(Xs, Y2, yerr=err_Y2, label='a_t')
    #plt.errorbar(Xs, Y3, yerr=err_Y3, label='extra_a_t')
    #plt.errorbar(Xs, Y4, yerr=err_Y4, label='extra_m_t')
    plt.legend(loc='lower right')

    plt.savefig( './plots/' + label + '.png' )



def bernoulli_flip(p):
    return True if random.random() < p else False

def get_predictions_for_all_experts( scores, mu_t_pairs, V_t, data_idx ):
    n_experts = len( V_t ) # currently active experts
    predictions = np.zeros( n_experts, dtype=int )
    map_idx_to_pred = {}
    for j, idx in enumerate(V_t):
        mu, t = mu_t_pairs[idx]

        max_score = -1000.0
        max_class = -1
        for cls in classes:
            if (scores[cls][ mu ][data_idx] >= t):
                if max_score < scores[cls][mu][data_idx]:
                    max_score = scores[cls][mu][data_idx] 
                    max_class = cls
        
        predictions[j] = max_class #every OSC rejected this example
        map_idx_to_pred[ idx ] = j
    return predictions, map_idx_to_pred 


def run_one_experiment( process_id, T, val_Y, test_Y, _predictions,  _test_predictions, return_stats ):

    '''
    Online Learning with Abstention scheme
    '''

    mu_t_pairs = []
    V_t = []            # All possible experts (mus \times thresholds)
    n_experts=0
    for mu in mus:
        for t in thresholds:
            mu_t_pairs.append( (mu, t) )
            V_t.append( n_experts )
            n_experts += 1

    #T = len(test_Y) #10000     # number of rounds
    #p = math.sqrt(2*math.log(T)/T) # 0.02 #0.3     # bernoulli coin bias
    p = math.sqrt((math.log(T) * math.log(n_experts))/T)
    eta = p #0.01  # learning rate
    theta = 0.01

    active_experts = np.arange(n_experts)
    assert(len(active_experts) == n_experts)

    W_t = np.array([ 1./n_experts ]*n_experts)  # Weights : one for each expert
    l_t = np.array([ 0. ]*n_experts)            # #of abstaintions for each expert
    o_t = np.array([ 0. ]*n_experts)            # #of abstaintions for each expert
    m_t = np.array([ 0. ]*n_experts)            # #of mistakes for each expert
    algo_abstained = 0                          # #of abstaintions for the online learner
    algo_error     = 0                          # #of mistakes for the online learner
    n_data_points = test_Y.shape[0]
    print('N data points = ', n_data_points)
    print('W_t shape = ', W_t.shape)

    data_permutation = np.random.permutation( len(test_Y) )  #(T)
    print(data_permutation)

    for i in range(T):
       # Get context x_t, also have label y_t (dont reveal till abstention)
       # Evaluate f_i(x_t) for each i in V_t 
       #data_idx = random.randint( 0, n_data_points-1 )
       #data_idx = i
       data_idx = data_permutation[i]
       y_t = test_Y[ data_idx ]
       all_Vt_predictions, map_idx_to_pred = get_predictions_for_all_experts( _test_predictions, mu_t_pairs, V_t, data_idx )

       '''
       # Decision
       # If all have the same decision, make that decision
       # Otherwise
           At each time, toss an independent coin C_t ~ Bernoulli(p)
           If C_t = 1, abstain
           If C_t = 0, sample f_t ~ Pi = w_{t,f} / \sum_f w_{t,f} and play f_t(x_t)
       '''
       #all_equal = np.all( all_Vt_predictions == all_Vt_predictions[ active_experts[0] ] )
       all_equal = np.all( all_Vt_predictions[active_experts] == all_Vt_predictions[ active_experts[0] ] )
       if False : #all_equal:
           prediction = all_Vt_predictions[0]
       else:
           C_t = bernoulli_flip(p)
           if C_t: 
               prediction = -1 # Abstain
           else:
               Pi = W_t / np.sum(W_t)
               sample_clf = np.random.choice( n_experts, p=Pi )
               prediction = all_Vt_predictions[ map_idx_to_pred[sample_clf] ] 

       if i%100 == 0:
           print('round=', i, ' -- example=', data_idx, ' -- prediction=', prediction, ' -- #active experts=', len(active_experts))
       '''
       # Update
         If we abstained, then get y_t
         Refine version space: 
             for f \in V_t, if f(x_t) \not \in \{ ?, y_t \}
               w_{t,f} = 0
       '''
       if prediction == -1:
           algo_abstained += 1
           for j, idx in enumerate(V_t):
               if all_Vt_predictions[ idx ] not in [-1, y_t]:
                   #W_t[ idx ] = 0
                   o_t[ idx ] += 1
                   if o_t[ idx ] > (2*p* theta * T):
                       W_t[ idx ] = 0
       elif prediction != y_t:
           algo_error += 1

       for j, idx in enumerate(V_t):
           if all_Vt_predictions[idx] == -1:
               l_t[idx] += 1
               if W_t[idx] != 0:
                   W_t[ idx ] = W_t[ idx ] * (1. - eta)
           elif all_Vt_predictions[idx] != y_t:
               m_t[idx] += 1

       #V_t = []
       active_experts = []
       for j in range(n_experts):
           if W_t[j] != 0:
               #V_t.append(j)
               active_experts.append(j)
       active_experts = np.array( active_experts )

       if len(active_experts) == 0:
           print('active_experts set is empty... exiting the routine..')
           break

       '''
       # Always
          \ell^f_t = 1{ f(x_t) = ? } L^f_t
         L^f_t = \sum_{s < t} \ell^f_s
         w_{t,f} = w_{t-1, f} ( 1 - \eta \ell^f_t )
       '''

       '''
       # Need to validate that the best expert is in this set V_t
       # What are the metrics we are reporting?
       '''

    print('#algo abstained = ', algo_abstained, '/', T)
    print('#algo mistakes = ', algo_error, '/', T)
    print('#of experts with non-zero weights = ', np.count_nonzero(W_t), '/', n_experts)
    print('#of active experts = ', len(active_experts), '/', n_experts)
    print('[experts] #mistakes(min) = ', np.min(m_t), '/', T)
    print('[experts] #mistakes(max) = ', np.max(m_t), '/', T)
    print('[experts] #abstained(min) = ', np.min(l_t), '/', T)
    print('[experts] #abstained(max) = ', np.max(l_t), '/', T)

    min_mistakes = np.min(m_t)

    optimal_idx = -1
    optimal_mistakes = T
    optimal_abstained = T

    amm_mistake = T
    amm_abs = T

    mistake_matched_abs = T
    mma_mis = T
    #for idx in active_experts:
    for idx in range(n_experts):
        if min_mistakes == m_t[idx]:
            if optimal_abstained > l_t[idx]:
                optimal_mistakes = m_t[idx]
                optimal_abstained = l_t[idx]
                optimal_idx = idx

        if m_t[idx] <= algo_error:
            if mistake_matched_abs > l_t[idx]:
                mma_mis = m_t[idx]
                mistake_matched_abs = l_t[idx]

        if l_t[idx] <= algo_abstained:
            if amm_mistake > m_t[idx]:
                amm_mistake = m_t[idx]
                amm_abs = l_t[idx]


    if optimal_idx != -1:
        print('[optimal experts] #mistakes = ', optimal_mistakes, '/', T)
        print('[optimal experts] #abstained = ', optimal_abstained, '/', T)
        print('Mistake Matched #Abenstions = ', mistake_matched_abs, '/',T)
        print('Mistake Matched #Mistakes = ', mma_mis, '/',T)
        print('[AMM] #Abenstions = ', amm_abs, '/',T)
        print('[AMM] #Mistakes = ', amm_mistake, '/',T)
    else:
        print('No optimal expert found.')

    #
    #for idx in active_experts:
    #    print('[experts=', idx, '] --> mu, t', str(mu_t_pairs[idx]))
    #    print('[expert=', idx, '] #mistakes = ', m_t[idx], '/', T)
    #    print('[expert=', idx, '] #abstained = ', l_t[idx], '/', T)
    stats = [ algo_error, algo_abstained, 
              optimal_mistakes, optimal_abstained,
              mma_mis, mistake_matched_abs,
              amm_mistake, amm_abs,
              np.count_nonzero(W_t), len(active_experts), np.min(m_t), np.max(m_t), np.min(l_t), np.max(l_t) ]
    return ( len(active_experts) == 0 ), stats


def rerun_if_failed_one_experiment( process_id, T, val_Y, test_Y, _predictions,  _test_predictions, return_stats ):
    failed, stats = run_one_experiment( process_id, T, val_Y, test_Y, _predictions,  _test_predictions, return_stats )
    cnt = 0
    while failed and (cnt < 3):
        failed, stats = run_one_experiment( process_id, T, val_Y, test_Y, _predictions,  _test_predictions, return_stats )
        cnt += 1
    if not failed: 
        return_stats[ str(T) + '-r-' + str(process_id) ] = stats
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Online LWA Codebase')
    parser.add_argument('-d', '--data', default='./data/', type=str, metavar='DIR', help='path to dataset')
    args = parser.parse_args()
    print('args = ', args)


    with open( args.data + 'predictions.bin', 'rb') as fp:
        _predictions = pickle.load( fp )

    with open( args.data + 'test_predictions.bin', 'rb') as fp:
        _test_predictions = pickle.load( fp )

    #thresholds = np.unique(_predictions[classes[0]][mus[-1]])[::10]
    #thresholds = np.unique(_predictions[classes[0]][mus[-1]])[::100]
    #print('#thresholds = ', len(thresholds))

    #with open('./runs-varying-Ts-201621897914.7826424.pickle', 'rb') as handle:
    #    return_stats = pickle.load( handle ) #, protocol=pickle.HIGHEST_PROTOCOL) 
    return_stats = {'250-r-6': [6, 114, 5.0, 62.0, 6.0, 59.0, 5.0, 63.0, 196, 196, 5.0, 14.0, 38.0, 77.0], '250-r-8': [7, 129, 5.0, 62.0, 7.0, 57.0, 5.0, 63.0, 252, 252, 5.0, 14.0, 38.0, 77.0], '250-r-0': [8, 124, 5.0, 62.0, 8.0, 51.0, 5.0, 63.0, 237, 237, 5.0, 14.0, 38.0, 77.0], '250-r-1': [7, 121, 5.0, 62.0, 7.0, 57.0, 5.0, 63.0, 252, 252, 5.0, 14.0, 38.0, 77.0], '250-r-21': [8, 131, 5.0, 62.0, 8.0, 51.0, 5.0, 63.0, 252, 252, 5.0, 14.0, 38.0, 77.0], '250-r-9': [7, 118, 5.0, 62.0, 7.0, 57.0, 5.0, 63.0, 196, 196, 5.0, 14.0, 38.0, 77.0], '250-r-15': [9, 123, 5.0, 62.0, 9.0, 46.0, 5.0, 63.0, 472, 472, 5.0, 14.0, 38.0, 77.0], '250-r-22': [9, 132, 5.0, 62.0, 9.0, 46.0, 5.0, 63.0, 472, 472, 5.0, 14.0, 38.0, 77.0], '250-r-28': [5, 129, 5.0, 62.0, 5.0, 62.0, 5.0, 63.0, 152, 152, 5.0, 14.0, 38.0, 77.0], '250-r-39': [9, 116, 5.0, 62.0, 9.0, 46.0, 5.0, 63.0, 472, 472, 5.0, 14.0, 38.0, 77.0], '250-r-17': [5, 126, 5.0, 56.0, 5.0, 56.0, 5.0, 60.0, 228, 228, 5.0, 10.0, 38.0, 62.0], '250-r-36': [9, 129, 5.0, 62.0, 9.0, 46.0, 5.0, 63.0, 472, 472, 5.0, 14.0, 38.0, 77.0], '250-r-31': [7, 129, 5.0, 62.0, 7.0, 57.0, 5.0, 63.0, 163, 163, 5.0, 14.0, 38.0, 77.0], '250-r-35': [4, 127, 5.0, 62.0, 250, 250, 5.0, 63.0, 152, 152, 5.0, 14.0, 38.0, 77.0], '250-r-38': [5, 129, 5.0, 62.0, 5.0, 62.0, 5.0, 63.0, 152, 152, 5.0, 14.0, 38.0, 77.0], '250-r-16': [4, 118, 3.0, 55.0, 4.0, 53.0, 3.0, 60.0, 248, 248, 3.0, 10.0, 32.0, 68.0], '250-r-25': [6, 120, 5.0, 74.0, 6.0, 65.0, 5.0, 75.0, 13, 13, 5.0, 12.0, 36.0, 75.0], '250-r-27': [3, 130, 4.0, 67.0, 250, 250, 4.0, 71.0, 40, 40, 4.0, 9.0, 37.0, 77.0], '250-r-3': [3, 122, 1.0, 66.0, 3.0, 59.0, 1.0, 68.0, 126, 126, 1.0, 11.0, 39.0, 68.0], '250-r-26': [3, 119, 3.0, 65.0, 3.0, 65.0, 3.0, 65.0, 87, 87, 3.0, 14.0, 22.0, 65.0], '250-r-5': [7, 115, 3.0, 55.0, 7.0, 40.0, 3.0, 60.0, 385, 385, 3.0, 10.0, 32.0, 68.0], '250-r-29': [7, 128, 2.0, 75.0, 7.0, 49.0, 2.0, 77.0, 401, 401, 2.0, 11.0, 37.0, 83.0], '250-r-18': [4, 120, 3.0, 53.0, 4.0, 43.0, 3.0, 64.0, 267, 267, 3.0, 11.0, 31.0, 70.0], '250-r-23': [4, 115, 2.0, 62.0, 4.0, 41.0, 2.0, 62.0, 530, 530, 2.0, 7.0, 35.0, 75.0], '250-r-37': [5, 122, 5.0, 66.0, 5.0, 66.0, 5.0, 68.0, 347, 347, 5.0, 12.0, 30.0, 69.0], '250-r-11': [7, 126, 5.0, 70.0, 7.0, 61.0, 5.0, 70.0, 68, 68, 5.0, 14.0, 29.0, 70.0], '250-r-7': [2, 127, 1.0, 58.0, 2.0, 53.0, 1.0, 64.0, 290, 290, 1.0, 9.0, 34.0, 77.0], '250-r-10': [6, 131, 4.0, 78.0, 6.0, 71.0, 4.0, 81.0, 39, 39, 4.0, 15.0, 46.0, 82.0], '250-r-4': [5, 126, 4.0, 64.0, 5.0, 62.0, 4.0, 65.0, 161, 161, 4.0, 8.0, 37.0, 71.0], '250-r-24': [8, 117, 1.0, 62.0, 8.0, 35.0, 1.0, 63.0, 600, 600, 1.0, 9.0, 33.0, 66.0], '250-r-13': [6, 126, 3.0, 55.0, 6.0, 43.0, 3.0, 62.0, 490, 490, 3.0, 8.0, 39.0, 71.0], '250-r-19': [2, 130, 2.0, 62.0, 2.0, 62.0, 2.0, 63.0, 79, 79, 2.0, 12.0, 29.0, 66.0], '250-r-2': [3, 121, 4.0, 57.0, 250, 250, 4.0, 57.0, 158, 158, 4.0, 11.0, 37.0, 69.0], '250-r-33': [6, 138, 4.0, 78.0, 6.0, 71.0, 4.0, 81.0, 45, 45, 4.0, 15.0, 46.0, 82.0], '250-r-34': [6, 131, 5.0, 58.0, 6.0, 54.0, 5.0, 58.0, 145, 145, 5.0, 12.0, 33.0, 72.0], '250-r-14': [7, 148, 4.0, 65.0, 7.0, 58.0, 4.0, 70.0, 69, 69, 4.0, 11.0, 44.0, 73.0], '250-r-30': [10, 115, 5.0, 75.0, 10.0, 44.0, 5.0, 75.0, 297, 297, 5.0, 14.0, 33.0, 76.0], '250-r-32': [2, 134, 3.0, 70.0, 250, 250, 3.0, 70.0, 7, 7, 3.0, 10.0, 31.0, 70.0], '500-r-6': [12, 236, 11.0, 139.0, 12.0, 134.0, 11.0, 139.0, 94, 94, 11.0, 28.0, 73.0, 151.0], '500-r-11': [14, 225, 11.0, 139.0, 14.0, 122.0, 11.0, 139.0, 94, 94, 11.0, 28.0, 73.0, 151.0], '500-r-7': [16, 211, 11.0, 139.0, 16.0, 110.0, 11.0, 139.0, 314, 314, 11.0, 28.0, 73.0, 151.0], '500-r-23': [15, 211, 11.0, 139.0, 15.0, 117.0, 11.0, 139.0, 252, 252, 11.0, 28.0, 73.0, 151.0], '500-r-5': [12, 234, 11.0, 139.0, 12.0, 134.0, 11.0, 139.0, 152, 152, 11.0, 28.0, 73.0, 151.0], '500-r-17': [16, 210, 11.0, 139.0, 16.0, 110.0, 11.0, 139.0, 188, 188, 11.0, 28.0, 73.0, 151.0], '500-r-1': [17, 223, 11.0, 139.0, 17.0, 102.0, 11.0, 139.0, 361, 361, 11.0, 28.0, 73.0, 151.0], '500-r-20': [15, 226, 11.0, 139.0, 15.0, 117.0, 11.0, 139.0, 232, 232, 11.0, 28.0, 73.0, 151.0], '500-r-22': [11, 227, 11.0, 139.0, 11.0, 139.0, 11.0, 139.0, 39, 39, 11.0, 28.0, 73.0, 151.0], '500-r-31': [12, 223, 11.0, 139.0, 12.0, 134.0, 11.0, 139.0, 39, 39, 11.0, 28.0, 73.0, 151.0], '500-r-24': [17, 207, 11.0, 139.0, 17.0, 102.0, 11.0, 139.0, 304, 304, 11.0, 28.0, 73.0, 151.0], '500-r-32': [17, 215, 11.0, 139.0, 17.0, 102.0, 11.0, 139.0, 228, 228, 11.0, 28.0, 73.0, 151.0], '500-r-38': [12, 206, 11.0, 139.0, 12.0, 134.0, 11.0, 139.0, 94, 94, 11.0, 28.0, 73.0, 151.0], '500-r-16': [12, 207, 8.0, 132.0, 12.0, 113.0, 8.0, 139.0, 207, 207, 8.0, 23.0, 77.0, 139.0], '500-r-34': [11, 220, 11.0, 139.0, 11.0, 139.0, 11.0, 139.0, 39, 39, 11.0, 28.0, 73.0, 151.0], '500-r-9': [8, 213, 8.0, 141.0, 8.0, 141.0, 8.0, 141.0, 13, 13, 8.0, 23.0, 75.0, 141.0], '500-r-18': [11, 207, 8.0, 140.0, 11.0, 111.0, 8.0, 140.0, 94, 94, 8.0, 18.0, 75.0, 140.0], '500-r-21': [9, 213, 10.0, 128.0, 500, 500, 10.0, 130.0, 20, 20, 10.0, 26.0, 63.0, 135.0], '500-r-0': [9, 236, 7.0, 144.0, 9.0, 128.0, 7.0, 144.0, 34, 34, 7.0, 23.0, 72.0, 145.0], '500-r-3': [10, 190, 6.0, 145.0, 10.0, 113.0, 6.0, 145.0, 121, 121, 6.0, 18.0, 72.0, 146.0], '500-r-13': [8, 201, 5.0, 136.0, 8.0, 103.0, 5.0, 144.0, 289, 289, 5.0, 14.0, 83.0, 144.0], '500-r-28': [15, 194, 6.0, 145.0, 15.0, 78.0, 6.0, 145.0, 598, 598, 6.0, 18.0, 72.0, 146.0], '500-r-10': [12, 210, 11.0, 129.0, 12.0, 118.0, 11.0, 129.0, 60, 60, 11.0, 20.0, 66.0, 129.0], '500-r-29': [13, 195, 6.0, 130.0, 13.0, 78.0, 6.0, 134.0, 455, 455, 6.0, 18.0, 65.0, 136.0], '500-r-26': [7, 223, 5.0, 129.0, 7.0, 121.0, 5.0, 134.0, 94, 94, 5.0, 19.0, 69.0, 134.0], '500-r-4': [11, 227, 9.0, 139.0, 11.0, 119.0, 9.0, 139.0, 146, 146, 9.0, 25.0, 74.0, 152.0], '500-r-2': [17, 171, 7.0, 133.0, 17.0, 80.0, 7.0, 137.0, 481, 481, 7.0, 22.0, 66.0, 137.0], '500-r-25': [7, 247, 6.0, 143.0, 7.0, 133.0, 6.0, 144.0, 30, 30, 6.0, 22.0, 73.0, 144.0], '500-r-39': [12, 234, 8.0, 151.0, 12.0, 133.0, 8.0, 159.0, 60, 60, 8.0, 25.0, 80.0, 159.0], '500-r-15': [10, 219, 8.0, 132.0, 10.0, 107.0, 8.0, 134.0, 155, 155, 8.0, 23.0, 63.0, 134.0], '500-r-36': [19, 203, 12.0, 151.0, 19.0, 86.0, 12.0, 151.0, 379, 379, 12.0, 27.0, 70.0, 152.0], '500-r-19': [11, 202, 11.0, 134.0, 11.0, 134.0, 11.0, 140.0, 21, 21, 11.0, 22.0, 71.0, 140.0], '500-r-12': [10, 208, 9.0, 141.0, 10.0, 125.0, 9.0, 142.0, 90, 90, 9.0, 29.0, 69.0, 143.0], '500-r-35': [11, 206, 6.0, 147.0, 11.0, 107.0, 6.0, 148.0, 30, 30, 6.0, 24.0, 71.0, 148.0], '500-r-30': [10, 232, 7.0, 140.0, 10.0, 128.0, 7.0, 142.0, 87, 87, 7.0, 29.0, 67.0, 156.0], '500-r-37': [15, 189, 9.0, 115.0, 15.0, 92.0, 9.0, 120.0, 404, 404, 9.0, 22.0, 75.0, 137.0], '500-r-8': [16, 187, 6.0, 134.0, 16.0, 84.0, 6.0, 134.0, 443, 443, 6.0, 21.0, 72.0, 134.0], '500-r-14': [15, 187, 9.0, 131.0, 15.0, 101.0, 9.0, 131.0, 237, 237, 9.0, 23.0, 66.0, 132.0], '750-r-2': [24, 279, 14.0, 218.0, 24.0, 174.0, 14.0, 218.0, 239, 239, 14.0, 36.0, 119.0, 235.0], '750-r-17': [19, 298, 14.0, 218.0, 19.0, 201.0, 14.0, 218.0, 163, 163, 14.0, 36.0, 119.0, 235.0], '750-r-9': [24, 294, 14.0, 218.0, 24.0, 174.0, 14.0, 218.0, 383, 383, 14.0, 36.0, 119.0, 235.0], '750-r-1': [18, 330, 14.0, 218.0, 18.0, 203.0, 14.0, 218.0, 153, 153, 14.0, 36.0, 119.0, 235.0], '750-r-10': [22, 304, 14.0, 218.0, 22.0, 186.0, 14.0, 218.0, 239, 239, 14.0, 36.0, 119.0, 235.0], '750-r-4': [15, 325, 14.0, 218.0, 15.0, 212.0, 14.0, 218.0, 94, 94, 14.0, 36.0, 119.0, 235.0], '750-r-22': [22, 298, 14.0, 218.0, 22.0, 186.0, 14.0, 218.0, 150, 150, 14.0, 36.0, 119.0, 235.0], '750-r-23': [21, 295, 14.0, 218.0, 21.0, 191.0, 14.0, 218.0, 137, 137, 14.0, 36.0, 119.0, 235.0], '750-r-19': [18, 326, 14.0, 218.0, 18.0, 203.0, 14.0, 218.0, 105, 105, 14.0, 36.0, 119.0, 235.0], '750-r-31': [24, 293, 14.0, 218.0, 24.0, 174.0, 14.0, 218.0, 262, 262, 14.0, 36.0, 119.0, 235.0], '750-r-15': [20, 320, 14.0, 218.0, 20.0, 198.0, 14.0, 218.0, 120, 120, 14.0, 36.0, 119.0, 235.0], '750-r-33': [20, 306, 14.0, 218.0, 20.0, 198.0, 14.0, 218.0, 200, 200, 14.0, 36.0, 119.0, 235.0], '750-r-25': [23, 314, 14.0, 218.0, 23.0, 179.0, 14.0, 218.0, 324, 324, 14.0, 36.0, 119.0, 235.0], '750-r-34': [21, 316, 14.0, 218.0, 21.0, 191.0, 14.0, 218.0, 105, 105, 14.0, 36.0, 119.0, 235.0], '750-r-39': [15, 308, 14.0, 218.0, 15.0, 212.0, 14.0, 218.0, 105, 105, 14.0, 36.0, 119.0, 235.0], '750-r-35': [21, 305, 14.0, 218.0, 21.0, 191.0, 14.0, 218.0, 186, 186, 14.0, 36.0, 119.0, 235.0], '750-r-3': [23, 266, 10.0, 201.0, 23.0, 118.0, 10.0, 201.0, 514, 514, 10.0, 28.0, 103.0, 201.0], '750-r-12': [17, 320, 11.0, 198.0, 17.0, 174.0, 11.0, 198.0, 102, 102, 11.0, 37.0, 101.0, 221.0], '750-r-14': [16, 256, 7.0, 210.0, 16.0, 140.0, 7.0, 210.0, 299, 299, 7.0, 27.0, 105.0, 210.0], '750-r-20': [11, 307, 8.0, 206.0, 11.0, 180.0, 8.0, 209.0, 134, 134, 8.0, 31.0, 104.0, 209.0], '750-r-29': [13, 284, 7.0, 207.0, 13.0, 138.0, 7.0, 207.0, 272, 272, 7.0, 23.0, 107.0, 207.0], '750-r-16': [17, 296, 16.0, 205.0, 17.0, 194.0, 16.0, 205.0, 3, 3, 16.0, 36.0, 109.0, 205.0], '750-r-0': [26, 262, 16.0, 187.0, 26.0, 135.0, 16.0, 196.0, 426, 426, 16.0, 37.0, 103.0, 206.0], '750-r-36': [22, 296, 10.0, 225.0, 22.0, 154.0, 10.0, 225.0, 142, 142, 10.0, 32.0, 110.0, 226.0], '750-r-32': [15, 283, 9.0, 200.0, 15.0, 155.0, 9.0, 200.0, 31, 31, 9.0, 29.0, 103.0, 200.0], '750-r-30': [18, 287, 12.0, 222.0, 18.0, 180.0, 12.0, 223.0, 64, 64, 12.0, 33.0, 108.0, 223.0], '750-r-21': [23, 282, 13.0, 222.0, 23.0, 149.0, 13.0, 223.0, 267, 267, 13.0, 39.0, 108.0, 223.0], '750-r-5': [15, 300, 11.0, 213.0, 15.0, 180.0, 11.0, 215.0, 13, 13, 11.0, 34.0, 107.0, 215.0], '750-r-26': [19, 286, 10.0, 198.0, 19.0, 148.0, 10.0, 199.0, 303, 303, 10.0, 29.0, 117.0, 208.0], '750-r-11': [17, 318, 13.0, 215.0, 17.0, 175.0, 13.0, 223.0, 108, 108, 13.0, 41.0, 107.0, 223.0], '750-r-8': [26, 279, 10.0, 205.0, 26.0, 115.0, 10.0, 205.0, 271, 271, 10.0, 32.0, 98.0, 205.0], '750-r-7': [21, 286, 9.0, 215.0, 21.0, 142.0, 9.0, 215.0, 261, 261, 9.0, 32.0, 110.0, 215.0], '750-r-18': [16, 294, 8.0, 224.0, 16.0, 160.0, 8.0, 224.0, 214, 214, 8.0, 32.0, 111.0, 225.0], '750-r-27': [12, 283, 6.0, 189.0, 12.0, 148.0, 6.0, 189.0, 166, 166, 6.0, 25.0, 103.0, 189.0], '750-r-6': [13, 281, 6.0, 189.0, 13.0, 135.0, 6.0, 189.0, 99, 99, 6.0, 25.0, 103.0, 189.0], '750-r-38': [13, 274, 6.0, 203.0, 13.0, 152.0, 6.0, 204.0, 237, 237, 6.0, 24.0, 107.0, 204.0], '750-r-37': [18, 283, 8.0, 195.0, 18.0, 138.0, 8.0, 207.0, 175, 175, 8.0, 32.0, 95.0, 207.0], '750-r-24': [16, 282, 9.0, 203.0, 16.0, 149.0, 9.0, 206.0, 348, 348, 9.0, 30.0, 99.0, 217.0], '750-r-28': [17, 309, 11.0, 195.0, 17.0, 164.0, 11.0, 195.0, 83, 83, 11.0, 43.0, 99.0, 210.0], '750-r-13': [23, 322, 16.0, 234.0, 23.0, 189.0, 16.0, 234.0, 76, 76, 16.0, 44.0, 121.0, 236.0], '1000-r-12': [22, 377, 16.0, 293.0, 22.0, 251.0, 16.0, 295.0, 109, 109, 16.0, 41.0, 153.0, 295.0], '1000-r-6': [22, 399, 16.0, 293.0, 22.0, 251.0, 16.0, 295.0, 39, 39, 16.0, 41.0, 153.0, 295.0], '1000-r-13': [22, 377, 16.0, 293.0, 22.0, 251.0, 16.0, 295.0, 111, 111, 16.0, 41.0, 153.0, 295.0], '1000-r-5': [23, 382, 16.0, 293.0, 23.0, 248.0, 16.0, 295.0, 212, 212, 16.0, 41.0, 153.0, 295.0], '1000-r-25': [29, 360, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 311, 311, 16.0, 41.0, 153.0, 295.0], '1000-r-19': [31, 324, 16.0, 293.0, 31.0, 195.0, 16.0, 295.0, 456, 456, 16.0, 41.0, 153.0, 295.0], '1000-r-7': [24, 390, 16.0, 293.0, 24.0, 240.0, 16.0, 295.0, 39, 39, 16.0, 41.0, 153.0, 295.0], '1000-r-1': [29, 363, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 125, 125, 16.0, 41.0, 153.0, 295.0], '1000-r-4': [17, 405, 16.0, 293.0, 17.0, 273.0, 16.0, 295.0, 110, 110, 16.0, 41.0, 153.0, 295.0], '1000-r-8': [21, 397, 16.0, 293.0, 21.0, 254.0, 16.0, 295.0, 39, 39, 16.0, 41.0, 153.0, 295.0], '1000-r-10': [25, 367, 16.0, 293.0, 25.0, 239.0, 16.0, 295.0, 233, 233, 16.0, 41.0, 153.0, 295.0], '1000-r-11': [19, 375, 16.0, 293.0, 19.0, 259.0, 16.0, 295.0, 39, 39, 16.0, 41.0, 153.0, 295.0], '1000-r-24': [29, 387, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 361, 361, 16.0, 41.0, 153.0, 295.0], '1000-r-22': [19, 390, 16.0, 293.0, 19.0, 259.0, 16.0, 295.0, 39, 39, 16.0, 41.0, 153.0, 295.0], '1000-r-17': [26, 375, 16.0, 293.0, 26.0, 233.0, 16.0, 295.0, 167, 167, 16.0, 41.0, 153.0, 295.0], '1000-r-3': [29, 360, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 281, 281, 16.0, 41.0, 153.0, 295.0], '1000-r-14': [28, 349, 16.0, 293.0, 28.0, 216.0, 16.0, 295.0, 237, 237, 16.0, 41.0, 153.0, 295.0], '1000-r-39': [28, 363, 16.0, 293.0, 28.0, 216.0, 16.0, 295.0, 137, 137, 16.0, 41.0, 153.0, 295.0], '1000-r-20': [27, 362, 16.0, 293.0, 27.0, 223.0, 16.0, 295.0, 322, 322, 16.0, 41.0, 153.0, 295.0], '1000-r-21': [19, 390, 16.0, 293.0, 19.0, 259.0, 16.0, 295.0, 115, 115, 16.0, 41.0, 153.0, 295.0], '1000-r-15': [29, 359, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 269, 269, 16.0, 41.0, 153.0, 295.0], '1000-r-28': [29, 369, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 232, 232, 16.0, 41.0, 153.0, 295.0], '1000-r-31': [20, 387, 16.0, 293.0, 19.0, 259.0, 16.0, 295.0, 13, 13, 16.0, 41.0, 153.0, 295.0], '1000-r-26': [24, 371, 16.0, 293.0, 24.0, 240.0, 16.0, 295.0, 169, 169, 16.0, 41.0, 153.0, 295.0], '1000-r-27': [27, 380, 16.0, 293.0, 27.0, 223.0, 16.0, 295.0, 115, 115, 16.0, 41.0, 153.0, 295.0], '1000-r-34': [30, 337, 16.0, 293.0, 30.0, 200.0, 16.0, 295.0, 345, 345, 16.0, 41.0, 153.0, 295.0], '1000-r-37': [25, 385, 16.0, 293.0, 25.0, 239.0, 16.0, 295.0, 112, 112, 16.0, 41.0, 153.0, 295.0], '1000-r-35': [29, 362, 16.0, 293.0, 29.0, 211.0, 16.0, 295.0, 312, 312, 16.0, 41.0, 153.0, 295.0], '1000-r-36': [27, 369, 16.0, 293.0, 27.0, 223.0, 16.0, 295.0, 341, 341, 16.0, 41.0, 153.0, 295.0], '1000-r-38': [26, 383, 16.0, 293.0, 26.0, 233.0, 16.0, 295.0, 105, 105, 16.0, 41.0, 153.0, 295.0], '1000-r-30': [24, 388, 16.0, 293.0, 24.0, 240.0, 16.0, 295.0, 117, 117, 16.0, 41.0, 153.0, 295.0], '1000-r-9': [24, 345, 12.0, 296.0, 24.0, 201.0, 12.0, 296.0, 297, 297, 12.0, 41.0, 133.0, 296.0], '1000-r-16': [25, 337, 12.0, 264.0, 25.0, 188.0, 12.0, 264.0, 364, 364, 12.0, 35.0, 148.0, 276.0], '1000-r-23': [27, 338, 17.0, 275.0, 27.0, 185.0, 17.0, 278.0, 283, 283, 17.0, 37.0, 137.0, 278.0], '1000-r-33': [29, 344, 14.0, 285.0, 29.0, 165.0, 14.0, 287.0, 210, 210, 14.0, 43.0, 127.0, 287.0], '1000-r-18': [32, 350, 21.0, 283.0, 32.0, 204.0, 21.0, 283.0, 225, 225, 21.0, 50.0, 141.0, 283.0], '1000-r-29': [29, 365, 16.0, 286.0, 28.0, 199.0, 16.0, 287.0, 321, 321, 16.0, 47.0, 152.0, 287.0], '1000-r-2': [31, 341, 16.0, 296.0, 31.0, 187.0, 16.0, 296.0, 283, 283, 16.0, 40.0, 166.0, 296.0], '1000-r-32': [23, 377, 19.0, 280.0, 23.0, 253.0, 19.0, 281.0, 84, 84, 19.0, 46.0, 149.0, 281.0], '1000-r-0': [22, 388, 16.0, 284.0, 22.0, 242.0, 16.0, 286.0, 83, 83, 16.0, 50.0, 140.0, 286.0], '1250-r-8': [41, 428, 19.0, 373.0, 41.0, 231.0, 19.0, 375.0, 472, 472, 19.0, 49.0, 201.0, 375.0], '1250-r-9': [30, 462, 19.0, 373.0, 30.0, 304.0, 19.0, 375.0, 111, 111, 19.0, 49.0, 201.0, 375.0], '1250-r-2': [25, 489, 19.0, 373.0, 25.0, 326.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-6': [28, 473, 19.0, 373.0, 28.0, 317.0, 19.0, 375.0, 145, 145, 19.0, 49.0, 201.0, 375.0], '1250-r-5': [31, 454, 19.0, 373.0, 31.0, 304.0, 19.0, 375.0, 76, 76, 19.0, 49.0, 201.0, 375.0], '1250-r-10': [23, 496, 19.0, 373.0, 23.0, 335.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-7': [34, 454, 19.0, 373.0, 34.0, 284.0, 19.0, 375.0, 235, 235, 19.0, 49.0, 201.0, 375.0], '1250-r-13': [29, 499, 19.0, 373.0, 29.0, 314.0, 19.0, 375.0, 115, 115, 19.0, 49.0, 201.0, 375.0], '1250-r-11': [35, 434, 19.0, 373.0, 35.0, 276.0, 19.0, 375.0, 204, 204, 19.0, 49.0, 201.0, 375.0], '1250-r-15': [33, 457, 19.0, 373.0, 33.0, 291.0, 19.0, 375.0, 204, 204, 19.0, 49.0, 201.0, 375.0], '1250-r-0': [30, 441, 19.0, 373.0, 30.0, 304.0, 19.0, 375.0, 178, 178, 19.0, 49.0, 201.0, 375.0], '1250-r-1': [33, 452, 19.0, 373.0, 33.0, 291.0, 19.0, 375.0, 254, 254, 19.0, 49.0, 201.0, 375.0], '1250-r-16': [29, 474, 19.0, 373.0, 29.0, 314.0, 19.0, 375.0, 127, 127, 19.0, 49.0, 201.0, 375.0], '1250-r-14': [32, 483, 19.0, 373.0, 32.0, 298.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-4': [24, 488, 19.0, 373.0, 24.0, 334.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-19': [36, 428, 19.0, 373.0, 36.0, 270.0, 19.0, 375.0, 353, 353, 19.0, 49.0, 201.0, 375.0], '1250-r-18': [35, 436, 19.0, 373.0, 35.0, 276.0, 19.0, 375.0, 137, 137, 19.0, 49.0, 201.0, 375.0], '1250-r-20': [33, 452, 19.0, 373.0, 33.0, 291.0, 19.0, 375.0, 122, 122, 19.0, 49.0, 201.0, 375.0], '1250-r-25': [35, 458, 19.0, 373.0, 35.0, 276.0, 19.0, 375.0, 169, 169, 19.0, 49.0, 201.0, 375.0], '1250-r-22': [36, 420, 19.0, 373.0, 36.0, 270.0, 19.0, 375.0, 418, 418, 19.0, 49.0, 201.0, 375.0], '1250-r-24': [32, 463, 19.0, 373.0, 32.0, 298.0, 19.0, 375.0, 133, 133, 19.0, 49.0, 201.0, 375.0], '1250-r-26': [32, 441, 19.0, 373.0, 32.0, 298.0, 19.0, 375.0, 76, 76, 19.0, 49.0, 201.0, 375.0], '1250-r-34': [32, 448, 19.0, 373.0, 32.0, 298.0, 19.0, 375.0, 127, 127, 19.0, 49.0, 201.0, 375.0], '1250-r-36': [25, 473, 19.0, 373.0, 25.0, 326.0, 19.0, 375.0, 106, 106, 19.0, 49.0, 201.0, 375.0], '1250-r-39': [26, 490, 19.0, 373.0, 25.0, 326.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-31': [33, 478, 19.0, 373.0, 33.0, 291.0, 19.0, 375.0, 200, 200, 19.0, 49.0, 201.0, 375.0], '1250-r-35': [27, 469, 19.0, 373.0, 27.0, 323.0, 19.0, 375.0, 109, 109, 19.0, 49.0, 201.0, 375.0], '1250-r-30': [23, 495, 19.0, 373.0, 23.0, 335.0, 19.0, 375.0, 94, 94, 19.0, 49.0, 201.0, 375.0], '1250-r-29': [32, 466, 19.0, 373.0, 32.0, 298.0, 19.0, 375.0, 172, 172, 19.0, 49.0, 201.0, 375.0], '1250-r-33': [28, 465, 19.0, 373.0, 28.0, 317.0, 19.0, 375.0, 39, 39, 19.0, 49.0, 201.0, 375.0], '1250-r-38': [30, 478, 19.0, 373.0, 30.0, 304.0, 19.0, 375.0, 16, 16, 19.0, 49.0, 201.0, 375.0], '1250-r-23': [30, 449, 13.0, 357.0, 30.0, 263.0, 13.0, 359.0, 235, 235, 13.0, 49.0, 183.0, 362.0], '1250-r-28': [32, 455, 17.0, 357.0, 32.0, 254.0, 17.0, 358.0, 16, 16, 17.0, 54.0, 182.0, 359.0], '1250-r-12': [45, 414, 21.0, 361.0, 44.0, 230.0, 21.0, 362.0, 260, 260, 21.0, 58.0, 187.0, 363.0], '1250-r-21': [34, 442, 16.0, 345.0, 34.0, 247.0, 16.0, 345.0, 179, 179, 16.0, 69.0, 157.0, 347.0], '1250-r-37': [16, 497, 11.0, 358.0, 16.0, 317.0, 11.0, 361.0, 97, 97, 11.0, 49.0, 174.0, 361.0], '1250-r-27': [27, 446, 13.0, 337.0, 25.0, 265.0, 13.0, 338.0, 34, 34, 13.0, 51.0, 171.0, 338.0], '1250-r-32': [29, 431, 20.0, 357.0, 29.0, 285.0, 20.0, 358.0, 108, 108, 20.0, 54.0, 176.0, 358.0], '1250-r-3': [32, 482, 20.0, 396.0, 32.0, 322.0, 20.0, 398.0, 52, 52, 20.0, 66.0, 191.0, 398.0], '1250-r-17': [29, 462, 21.0, 343.0, 29.0, 297.0, 21.0, 362.0, 67, 67, 21.0, 58.0, 192.0, 362.0], '1500-r-16': [34, 531, 21.0, 441.0, 34.0, 357.0, 21.0, 443.0, 94, 94, 21.0, 55.0, 234.0, 445.0], '1500-r-9': [39, 512, 21.0, 441.0, 39.0, 322.0, 21.0, 443.0, 303, 303, 21.0, 55.0, 234.0, 445.0], '1500-r-2': [37, 498, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 196, 196, 21.0, 55.0, 234.0, 445.0], '1500-r-11': [38, 508, 21.0, 441.0, 38.0, 331.0, 21.0, 443.0, 229, 229, 21.0, 55.0, 234.0, 445.0], '1500-r-7': [41, 465, 21.0, 441.0, 41.0, 304.0, 21.0, 443.0, 343, 343, 21.0, 55.0, 234.0, 445.0], '1500-r-1': [44, 500, 21.0, 441.0, 44.0, 285.0, 21.0, 443.0, 488, 488, 21.0, 55.0, 234.0, 445.0], '1500-r-8': [27, 544, 21.0, 441.0, 27.0, 386.0, 21.0, 443.0, 13, 13, 21.0, 55.0, 234.0, 445.0], '1500-r-12': [37, 497, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 190, 190, 21.0, 55.0, 234.0, 445.0], '1500-r-20': [35, 536, 21.0, 441.0, 35.0, 350.0, 21.0, 443.0, 188, 188, 21.0, 55.0, 234.0, 445.0], '1500-r-10': [33, 516, 21.0, 441.0, 33.0, 357.0, 21.0, 443.0, 13, 13, 21.0, 55.0, 234.0, 445.0], '1500-r-3': [37, 486, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 106, 106, 21.0, 55.0, 234.0, 445.0], '1500-r-13': [38, 509, 21.0, 441.0, 38.0, 331.0, 21.0, 443.0, 293, 293, 21.0, 55.0, 234.0, 445.0], '1500-r-0': [31, 545, 21.0, 441.0, 31.0, 371.0, 21.0, 443.0, 92, 92, 21.0, 55.0, 234.0, 445.0], '1500-r-5': [37, 512, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 100, 100, 21.0, 55.0, 234.0, 445.0], '1500-r-18': [37, 515, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 190, 190, 21.0, 55.0, 234.0, 445.0], '1500-r-31': [30, 548, 21.0, 441.0, 30.0, 377.0, 21.0, 443.0, 144, 144, 21.0, 55.0, 234.0, 445.0], '1500-r-22': [40, 498, 21.0, 441.0, 40.0, 314.0, 21.0, 443.0, 315, 315, 21.0, 55.0, 234.0, 445.0], '1500-r-21': [34, 527, 21.0, 441.0, 34.0, 357.0, 21.0, 443.0, 162, 162, 21.0, 55.0, 234.0, 445.0], '1500-r-17': [39, 518, 21.0, 441.0, 39.0, 322.0, 21.0, 443.0, 307, 307, 21.0, 55.0, 234.0, 445.0], '1500-r-25': [34, 520, 21.0, 441.0, 34.0, 357.0, 21.0, 443.0, 169, 169, 21.0, 55.0, 234.0, 445.0], '1500-r-14': [46, 478, 21.0, 441.0, 46.0, 283.0, 21.0, 443.0, 523, 523, 21.0, 55.0, 234.0, 445.0], '1500-r-32': [35, 520, 21.0, 441.0, 35.0, 350.0, 21.0, 443.0, 164, 164, 21.0, 55.0, 234.0, 445.0], '1500-r-30': [36, 512, 21.0, 441.0, 36.0, 339.0, 21.0, 443.0, 169, 169, 21.0, 55.0, 234.0, 445.0], '1500-r-38': [29, 563, 21.0, 441.0, 29.0, 378.0, 21.0, 443.0, 39, 39, 21.0, 55.0, 234.0, 445.0], '1500-r-28': [41, 487, 21.0, 441.0, 41.0, 304.0, 21.0, 443.0, 355, 355, 21.0, 55.0, 234.0, 445.0], '1500-r-24': [41, 511, 21.0, 441.0, 41.0, 304.0, 21.0, 443.0, 237, 237, 21.0, 55.0, 234.0, 445.0], '1500-r-27': [38, 499, 21.0, 441.0, 38.0, 331.0, 21.0, 443.0, 303, 303, 21.0, 55.0, 234.0, 445.0], '1500-r-29': [44, 477, 21.0, 441.0, 44.0, 285.0, 21.0, 443.0, 466, 466, 21.0, 55.0, 234.0, 445.0], '1500-r-33': [37, 495, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 154, 154, 21.0, 55.0, 234.0, 445.0], '1500-r-37': [27, 566, 21.0, 441.0, 27.0, 386.0, 21.0, 443.0, 97, 97, 21.0, 55.0, 234.0, 445.0], '1500-r-26': [37, 498, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 207, 207, 21.0, 55.0, 234.0, 445.0], '1500-r-39': [37, 512, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 177, 177, 21.0, 55.0, 234.0, 445.0], '1500-r-36': [37, 498, 21.0, 441.0, 37.0, 332.0, 21.0, 443.0, 76, 76, 21.0, 55.0, 234.0, 445.0], '1500-r-34': [23, 562, 21.0, 441.0, 23.0, 411.0, 21.0, 443.0, 76, 76, 21.0, 55.0, 234.0, 445.0], '1500-r-19': [41, 484, 19.0, 418.0, 40.0, 274.0, 19.0, 420.0, 272, 272, 19.0, 58.0, 216.0, 424.0], '1500-r-4': [38, 500, 26.0, 381.0, 38.0, 287.0, 26.0, 409.0, 27, 27, 26.0, 56.0, 211.0, 409.0], '1500-r-35': [29, 536, 27.0, 397.0, 29.0, 372.0, 27.0, 400.0, 3, 3, 27.0, 72.0, 202.0, 400.0], '1500-r-23': [32, 553, 19.0, 469.0, 32.0, 367.0, 19.0, 470.0, 32, 32, 19.0, 63.0, 236.0, 471.0], '1750-r-6': [44, 626, 26.0, 512.0, 44.0, 394.0, 26.0, 515.0, 123, 123, 26.0, 66.0, 277.0, 515.0], '1750-r-7': [42, 608, 26.0, 512.0, 42.0, 409.0, 26.0, 515.0, 71, 71, 26.0, 66.0, 277.0, 515.0], '1750-r-4': [44, 598, 26.0, 512.0, 44.0, 394.0, 26.0, 515.0, 163, 163, 26.0, 66.0, 277.0, 515.0], '1750-r-0': [35, 642, 26.0, 512.0, 34.0, 445.0, 26.0, 515.0, 16, 16, 26.0, 66.0, 277.0, 515.0], '1750-r-14': [50, 575, 26.0, 512.0, 50.0, 358.0, 26.0, 515.0, 237, 237, 26.0, 66.0, 277.0, 515.0], '1750-r-3': [50, 533, 26.0, 512.0, 50.0, 358.0, 26.0, 515.0, 197, 197, 26.0, 66.0, 277.0, 515.0], '1750-r-26': [40, 613, 26.0, 512.0, 40.0, 416.0, 26.0, 515.0, 118, 118, 26.0, 66.0, 277.0, 515.0], '1750-r-5': [52, 585, 26.0, 512.0, 52.0, 347.0, 26.0, 515.0, 345, 345, 26.0, 66.0, 277.0, 515.0], '1750-r-18': [47, 571, 26.0, 512.0, 47.0, 379.0, 26.0, 515.0, 235, 235, 26.0, 66.0, 277.0, 515.0], '1750-r-11': [35, 638, 26.0, 512.0, 34.0, 445.0, 26.0, 515.0, 123, 123, 26.0, 66.0, 277.0, 515.0], '1750-r-9': [56, 575, 26.0, 512.0, 56.0, 333.0, 26.0, 515.0, 432, 432, 26.0, 66.0, 277.0, 515.0], '1750-r-13': [42, 588, 26.0, 512.0, 42.0, 409.0, 26.0, 515.0, 129, 129, 26.0, 66.0, 277.0, 515.0], '1750-r-33': [44, 576, 26.0, 512.0, 44.0, 394.0, 26.0, 515.0, 214, 214, 26.0, 66.0, 277.0, 515.0], '1750-r-35': [33, 685, 26.0, 512.0, 33.0, 451.0, 26.0, 515.0, 7, 7, 26.0, 66.0, 277.0, 515.0], '1750-r-20': [45, 567, 26.0, 512.0, 44.0, 394.0, 26.0, 515.0, 13, 13, 26.0, 66.0, 277.0, 515.0], '1750-r-16': [41, 612, 26.0, 512.0, 41.0, 414.0, 26.0, 515.0, 115, 115, 26.0, 66.0, 277.0, 515.0], '1750-r-21': [49, 588, 26.0, 512.0, 49.0, 368.0, 26.0, 515.0, 235, 235, 26.0, 66.0, 277.0, 515.0], '1750-r-23': [46, 600, 26.0, 512.0, 46.0, 385.0, 26.0, 515.0, 108, 108, 26.0, 66.0, 277.0, 515.0], '1750-r-22': [42, 596, 26.0, 512.0, 42.0, 409.0, 26.0, 515.0, 94, 94, 26.0, 66.0, 277.0, 515.0], '1750-r-24': [36, 630, 26.0, 512.0, 36.0, 439.0, 26.0, 515.0, 61, 61, 26.0, 66.0, 277.0, 515.0], '1750-r-28': [39, 615, 26.0, 512.0, 39.0, 421.0, 26.0, 515.0, 13, 13, 26.0, 66.0, 277.0, 515.0], '1750-r-27': [41, 607, 26.0, 512.0, 41.0, 414.0, 26.0, 515.0, 92, 92, 26.0, 66.0, 277.0, 515.0], '1750-r-39': [44, 586, 26.0, 512.0, 44.0, 394.0, 26.0, 515.0, 102, 102, 26.0, 66.0, 277.0, 515.0], '1750-r-38': [38, 625, 26.0, 512.0, 38.0, 431.0, 26.0, 515.0, 129, 129, 26.0, 66.0, 277.0, 515.0], '1750-r-29': [51, 549, 26.0, 512.0, 51.0, 348.0, 26.0, 515.0, 381, 381, 26.0, 66.0, 277.0, 515.0], '1750-r-32': [47, 550, 26.0, 512.0, 47.0, 379.0, 26.0, 515.0, 188, 188, 26.0, 66.0, 277.0, 515.0], '1750-r-34': [34, 621, 26.0, 512.0, 34.0, 445.0, 26.0, 515.0, 3, 3, 26.0, 66.0, 277.0, 515.0], '1750-r-37': [46, 586, 26.0, 512.0, 46.0, 385.0, 26.0, 515.0, 193, 193, 26.0, 66.0, 277.0, 515.0], '1750-r-31': [37, 619, 26.0, 512.0, 37.0, 438.0, 26.0, 515.0, 3, 3, 26.0, 66.0, 277.0, 515.0], '1750-r-30': [41, 600, 26.0, 512.0, 41.0, 414.0, 26.0, 515.0, 115, 115, 26.0, 66.0, 277.0, 515.0], '1750-r-36': [39, 605, 26.0, 512.0, 39.0, 421.0, 26.0, 515.0, 115, 115, 26.0, 66.0, 277.0, 515.0], '1750-r-2': [35, 573, 25.0, 483.0, 35.0, 412.0, 25.0, 486.0, 4, 4, 25.0, 66.0, 243.0, 486.0], '1750-r-10': [52, 592, 26.0, 513.0, 52.0, 352.0, 26.0, 517.0, 50, 50, 26.0, 74.0, 270.0, 517.0], '1750-r-1': [34, 580, 21.0, 482.0, 34.0, 395.0, 21.0, 484.0, 157, 157, 21.0, 63.0, 269.0, 484.0], '1750-r-8': [39, 601, 24.0, 475.0, 39.0, 383.0, 24.0, 476.0, 125, 125, 24.0, 79.0, 252.0, 476.0], '1750-r-25': [30, 626, 22.0, 480.0, 30.0, 419.0, 22.0, 499.0, 89, 89, 22.0, 62.0, 263.0, 500.0], '1750-r-12': [47, 550, 16.0, 475.0, 47.0, 306.0, 16.0, 475.0, 368, 368, 16.0, 67.0, 253.0, 476.0], '1750-r-15': [58, 540, 27.0, 472.0, 58.0, 306.0, 27.0, 472.0, 87, 87, 27.0, 79.0, 241.0, 473.0], '1750-r-19': [41, 615, 26.0, 531.0, 40.0, 402.0, 26.0, 539.0, 73, 73, 26.0, 77.0, 274.0, 540.0], '1750-r-17': [52, 587, 28.0, 532.0, 52.0, 364.0, 28.0, 532.0, 250, 250, 28.0, 74.0, 275.0, 536.0], '2000-r-7': [57, 633, 36.0, 582.0, 57.0, 460.0, 36.0, 584.0, 106, 106, 36.0, 85.0, 311.0, 584.0], '2000-r-2': [53, 688, 36.0, 582.0, 53.0, 477.0, 36.0, 584.0, 148, 148, 36.0, 85.0, 311.0, 584.0], '2000-r-4': [51, 691, 36.0, 582.0, 51.0, 490.0, 36.0, 584.0, 79, 79, 36.0, 85.0, 311.0, 584.0], '2000-r-3': [59, 628, 36.0, 582.0, 58.0, 459.0, 36.0, 584.0, 79, 79, 36.0, 85.0, 311.0, 584.0], '2000-r-15': [63, 631, 36.0, 582.0, 63.0, 431.0, 36.0, 584.0, 199, 199, 36.0, 85.0, 311.0, 584.0], '2000-r-12': [61, 641, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 202, 202, 36.0, 85.0, 311.0, 584.0], '2000-r-8': [73, 597, 36.0, 582.0, 73.0, 373.0, 36.0, 584.0, 390, 390, 36.0, 85.0, 311.0, 584.0], '2000-r-1': [61, 645, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 197, 197, 36.0, 85.0, 311.0, 584.0], '2000-r-10': [60, 621, 36.0, 582.0, 60.0, 446.0, 36.0, 584.0, 149, 149, 36.0, 85.0, 311.0, 584.0], '2000-r-16': [54, 654, 36.0, 582.0, 54.0, 472.0, 36.0, 584.0, 60, 60, 36.0, 85.0, 311.0, 584.0], '2000-r-20': [57, 658, 36.0, 582.0, 57.0, 460.0, 36.0, 584.0, 111, 111, 36.0, 85.0, 311.0, 584.0], '2000-r-11': [67, 609, 36.0, 582.0, 67.0, 406.0, 36.0, 584.0, 94, 94, 36.0, 85.0, 311.0, 584.0], '2000-r-18': [52, 654, 36.0, 582.0, 52.0, 486.0, 36.0, 584.0, 55, 55, 36.0, 85.0, 311.0, 584.0], '2000-r-19': [60, 641, 36.0, 582.0, 60.0, 446.0, 36.0, 584.0, 173, 173, 36.0, 85.0, 311.0, 584.0], '2000-r-22': [47, 677, 36.0, 582.0, 47.0, 505.0, 36.0, 584.0, 60, 60, 36.0, 85.0, 311.0, 584.0], '2000-r-17': [66, 605, 36.0, 582.0, 66.0, 414.0, 36.0, 584.0, 66, 66, 36.0, 85.0, 311.0, 584.0], '2000-r-25': [61, 638, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 184, 184, 36.0, 85.0, 311.0, 584.0], '2000-r-24': [67, 625, 36.0, 582.0, 67.0, 406.0, 36.0, 584.0, 216, 216, 36.0, 85.0, 311.0, 584.0], '2000-r-21': [56, 643, 36.0, 582.0, 56.0, 464.0, 36.0, 584.0, 111, 111, 36.0, 85.0, 311.0, 584.0], '2000-r-27': [50, 698, 36.0, 582.0, 50.0, 498.0, 36.0, 584.0, 16, 16, 36.0, 85.0, 311.0, 584.0], '2000-r-38': [61, 648, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 180, 180, 36.0, 85.0, 311.0, 584.0], '2000-r-29': [61, 611, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 190, 190, 36.0, 85.0, 311.0, 584.0], '2000-r-30': [60, 654, 36.0, 582.0, 60.0, 446.0, 36.0, 584.0, 109, 109, 36.0, 85.0, 311.0, 584.0], '2000-r-33': [54, 632, 36.0, 582.0, 54.0, 472.0, 36.0, 584.0, 16, 16, 36.0, 85.0, 311.0, 584.0], '2000-r-28': [60, 641, 36.0, 582.0, 60.0, 446.0, 36.0, 584.0, 178, 178, 36.0, 85.0, 311.0, 584.0], '2000-r-37': [45, 713, 36.0, 582.0, 45.0, 512.0, 36.0, 584.0, 13, 13, 36.0, 85.0, 311.0, 584.0], '2000-r-35': [45, 723, 36.0, 582.0, 45.0, 512.0, 36.0, 584.0, 16, 16, 36.0, 85.0, 311.0, 584.0], '2000-r-34': [53, 680, 36.0, 582.0, 53.0, 477.0, 36.0, 584.0, 16, 16, 36.0, 85.0, 311.0, 584.0], '2000-r-32': [61, 638, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 197, 197, 36.0, 85.0, 311.0, 584.0], '2000-r-39': [61, 639, 36.0, 582.0, 61.0, 446.0, 36.0, 584.0, 230, 230, 36.0, 85.0, 311.0, 584.0], '2000-r-36': [63, 580, 26.0, 562.0, 63.0, 351.0, 26.0, 564.0, 370, 370, 26.0, 76.0, 308.0, 564.0], '2000-r-6': [57, 617, 27.0, 578.0, 57.0, 400.0, 27.0, 579.0, 76, 76, 27.0, 87.0, 298.0, 579.0], '2000-r-26': [50, 614, 23.0, 582.0, 49.0, 390.0, 23.0, 585.0, 321, 321, 23.0, 71.0, 318.0, 586.0], '2000-r-5': [53, 701, 34.0, 578.0, 52.0, 467.0, 34.0, 579.0, 65, 65, 34.0, 92.0, 307.0, 579.0], '2000-r-13': [51, 653, 31.0, 580.0, 51.0, 452.0, 31.0, 580.0, 189, 189, 31.0, 83.0, 310.0, 581.0], '2000-r-0': [61, 617, 28.0, 560.0, 61.0, 383.0, 28.0, 563.0, 257, 257, 28.0, 82.0, 313.0, 563.0], '2000-r-31': [60, 579, 16.0, 553.0, 60.0, 344.0, 16.0, 556.0, 434, 434, 16.0, 76.0, 296.0, 557.0], '2000-r-14': [66, 593, 32.0, 563.0, 66.0, 365.0, 32.0, 567.0, 125, 125, 32.0, 87.0, 290.0, 568.0], '2000-r-9': [54, 628, 20.0, 585.0, 54.0, 396.0, 20.0, 588.0, 223, 223, 20.0, 79.0, 315.0, 588.0], '2000-r-23': [55, 620, 20.0, 576.0, 55.0, 381.0, 20.0, 577.0, 335, 335, 20.0, 83.0, 308.0, 577.0], '2250-r-0': [67, 678, 37.0, 665.0, 67.0, 507.0, 37.0, 665.0, 199, 199, 37.0, 95.0, 357.0, 665.0], '2250-r-13': [57, 755, 37.0, 665.0, 57.0, 537.0, 37.0, 665.0, 55, 55, 37.0, 95.0, 357.0, 665.0], '2250-r-9': [71, 675, 37.0, 665.0, 71.0, 476.0, 37.0, 665.0, 119, 119, 37.0, 95.0, 357.0, 665.0], '2250-r-2': [50, 807, 37.0, 665.0, 50.0, 576.0, 37.0, 665.0, 4, 4, 37.0, 95.0, 357.0, 665.0], '2250-r-22': [71, 677, 37.0, 665.0, 71.0, 476.0, 37.0, 665.0, 136, 136, 37.0, 95.0, 357.0, 665.0], '2250-r-18': [50, 794, 37.0, 665.0, 50.0, 576.0, 37.0, 665.0, 3, 3, 37.0, 95.0, 357.0, 665.0], '2250-r-23': [58, 749, 37.0, 665.0, 57.0, 537.0, 37.0, 665.0, 16, 16, 37.0, 95.0, 357.0, 665.0], '2250-r-12': [53, 785, 37.0, 665.0, 53.0, 565.0, 37.0, 665.0, 13, 13, 37.0, 95.0, 357.0, 665.0], '2250-r-15': [75, 666, 37.0, 665.0, 75.0, 445.0, 37.0, 665.0, 269, 269, 37.0, 95.0, 357.0, 665.0], '2250-r-17': [70, 719, 37.0, 665.0, 70.0, 485.0, 37.0, 665.0, 64, 64, 37.0, 95.0, 357.0, 665.0], '2250-r-5': [51, 768, 37.0, 665.0, 50.0, 576.0, 37.0, 665.0, 36, 36, 37.0, 95.0, 357.0, 665.0], '2250-r-11': [72, 700, 37.0, 665.0, 72.0, 472.0, 37.0, 665.0, 191, 191, 37.0, 95.0, 357.0, 665.0], '2250-r-8': [65, 716, 37.0, 665.0, 65.0, 507.0, 37.0, 665.0, 86, 86, 37.0, 95.0, 357.0, 665.0], '2250-r-7': [60, 695, 37.0, 665.0, 60.0, 525.0, 37.0, 665.0, 58, 58, 37.0, 95.0, 357.0, 665.0], '2250-r-14': [56, 755, 37.0, 665.0, 56.0, 544.0, 37.0, 665.0, 66, 66, 37.0, 95.0, 357.0, 665.0], '2250-r-4': [56, 749, 37.0, 665.0, 56.0, 544.0, 37.0, 665.0, 73, 73, 37.0, 95.0, 357.0, 665.0], '2250-r-16': [57, 754, 37.0, 665.0, 57.0, 537.0, 37.0, 665.0, 3, 3, 37.0, 95.0, 357.0, 665.0], '2250-r-25': [66, 719, 37.0, 665.0, 66.0, 507.0, 37.0, 665.0, 191, 191, 37.0, 95.0, 357.0, 665.0], '2250-r-20': [71, 710, 37.0, 665.0, 71.0, 476.0, 37.0, 665.0, 194, 194, 37.0, 95.0, 357.0, 665.0], '2250-r-21': [55, 797, 37.0, 665.0, 55.0, 553.0, 37.0, 665.0, 5, 5, 37.0, 95.0, 357.0, 665.0], '2250-r-26': [68, 701, 37.0, 665.0, 68.0, 492.0, 37.0, 665.0, 1, 1, 37.0, 95.0, 357.0, 665.0], '2250-r-29': [68, 681, 37.0, 665.0, 68.0, 492.0, 37.0, 665.0, 113, 113, 37.0, 95.0, 357.0, 665.0], '2250-r-24': [74, 703, 37.0, 665.0, 74.0, 454.0, 37.0, 665.0, 314, 314, 37.0, 95.0, 357.0, 665.0], '2250-r-34': [58, 799, 37.0, 665.0, 57.0, 537.0, 37.0, 665.0, 13, 13, 37.0, 95.0, 357.0, 665.0], '2250-r-36': [61, 707, 37.0, 665.0, 61.0, 524.0, 37.0, 665.0, 4, 4, 37.0, 95.0, 357.0, 665.0], '2250-r-27': [60, 738, 37.0, 665.0, 60.0, 525.0, 37.0, 665.0, 52, 52, 37.0, 95.0, 357.0, 665.0], '2250-r-30': [67, 721, 37.0, 665.0, 67.0, 507.0, 37.0, 665.0, 106, 106, 37.0, 95.0, 357.0, 665.0], '2250-r-31': [53, 763, 37.0, 665.0, 53.0, 565.0, 37.0, 665.0, 75, 75, 37.0, 95.0, 357.0, 665.0], '2250-r-32': [73, 689, 37.0, 665.0, 73.0, 462.0, 37.0, 665.0, 239, 239, 37.0, 95.0, 357.0, 665.0], '2250-r-38': [59, 716, 37.0, 665.0, 59.0, 536.0, 37.0, 665.0, 148, 148, 37.0, 95.0, 357.0, 665.0], '2250-r-1': [47, 735, 31.0, 618.0, 47.0, 495.0, 31.0, 619.0, 50, 50, 31.0, 89.0, 329.0, 621.0], '2250-r-19': [39, 747, 21.0, 650.0, 39.0, 550.0, 21.0, 652.0, 94, 94, 21.0, 89.0, 335.0, 652.0], '2250-r-10': [74, 661, 42.0, 632.0, 74.0, 427.0, 42.0, 632.0, 21, 21, 42.0, 108.0, 328.0, 632.0], '2250-r-3': [81, 675, 33.0, 673.0, 81.0, 419.0, 33.0, 675.0, 174, 174, 33.0, 104.0, 353.0, 675.0], '2250-r-35': [76, 668, 28.0, 647.0, 75.0, 405.0, 28.0, 647.0, 332, 332, 28.0, 105.0, 332.0, 648.0], '2250-r-33': [38, 781, 30.0, 639.0, 38.0, 563.0, 30.0, 641.0, 12, 12, 30.0, 93.0, 339.0, 643.0], '2250-r-39': [69, 662, 34.0, 613.0, 68.0, 413.0, 34.0, 613.0, 280, 280, 34.0, 90.0, 316.0, 614.0], '2250-r-37': [65, 710, 35.0, 627.0, 65.0, 440.0, 35.0, 631.0, 128, 128, 35.0, 100.0, 318.0, 632.0], '2250-r-6': [64, 730, 34.0, 655.0, 63.0, 475.0, 34.0, 660.0, 48, 48, 34.0, 106.0, 342.0, 661.0], '2250-r-28': [75, 711, 36.0, 669.0, 75.0, 461.0, 36.0, 669.0, 76, 76, 36.0, 113.0, 343.0, 670.0], '2500-r-4': [67, 767, 37.0, 729.0, 67.0, 565.0, 37.0, 729.0, 152, 152, 37.0, 105.0, 391.0, 729.0], '2500-r-1': [52, 827, 37.0, 729.0, 50.0, 636.0, 37.0, 729.0, 39, 39, 37.0, 105.0, 391.0, 729.0], '2500-r-13': [59, 775, 37.0, 729.0, 58.0, 595.0, 37.0, 729.0, 151, 151, 37.0, 105.0, 391.0, 729.0], '2500-r-6': [74, 773, 37.0, 729.0, 73.0, 538.0, 37.0, 729.0, 233, 233, 37.0, 105.0, 391.0, 729.0], '2500-r-5': [74, 747, 37.0, 729.0, 73.0, 538.0, 37.0, 729.0, 202, 202, 37.0, 105.0, 391.0, 729.0], '2500-r-7': [75, 722, 37.0, 729.0, 75.0, 521.0, 42.0, 709.0, 197, 197, 37.0, 105.0, 391.0, 729.0], '2500-r-0': [55, 829, 37.0, 729.0, 55.0, 614.0, 37.0, 729.0, 71, 71, 37.0, 105.0, 391.0, 729.0], '2500-r-8': [63, 807, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 183, 183, 37.0, 105.0, 391.0, 729.0], '2500-r-23': [56, 846, 37.0, 729.0, 55.0, 614.0, 37.0, 729.0, 4, 4, 37.0, 105.0, 391.0, 729.0], '2500-r-16': [76, 763, 37.0, 729.0, 76.0, 520.0, 37.0, 729.0, 282, 282, 37.0, 105.0, 391.0, 729.0], '2500-r-11': [72, 770, 37.0, 729.0, 72.0, 544.0, 37.0, 729.0, 157, 157, 37.0, 105.0, 391.0, 729.0], '2500-r-3': [61, 803, 37.0, 729.0, 61.0, 582.0, 37.0, 729.0, 185, 185, 37.0, 105.0, 391.0, 729.0], '2500-r-9': [60, 806, 37.0, 729.0, 58.0, 595.0, 37.0, 729.0, 61, 61, 37.0, 105.0, 391.0, 729.0], '2500-r-12': [79, 792, 37.0, 729.0, 79.0, 499.0, 37.0, 729.0, 252, 252, 37.0, 105.0, 391.0, 729.0], '2500-r-18': [64, 799, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 89, 89, 37.0, 105.0, 391.0, 729.0], '2500-r-24': [64, 803, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 100, 100, 37.0, 105.0, 391.0, 729.0], '2500-r-20': [67, 779, 37.0, 729.0, 67.0, 565.0, 37.0, 729.0, 113, 113, 37.0, 105.0, 391.0, 729.0], '2500-r-19': [68, 799, 37.0, 729.0, 68.0, 561.0, 37.0, 729.0, 183, 183, 37.0, 105.0, 391.0, 729.0], '2500-r-22': [47, 854, 37.0, 729.0, 47.0, 655.0, 37.0, 729.0, 78, 78, 37.0, 105.0, 391.0, 729.0], '2500-r-29': [63, 776, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 54, 54, 37.0, 105.0, 391.0, 729.0], '2500-r-21': [49, 872, 37.0, 729.0, 49.0, 649.0, 37.0, 729.0, 39, 39, 37.0, 105.0, 391.0, 729.0], '2500-r-26': [58, 845, 37.0, 729.0, 58.0, 595.0, 37.0, 729.0, 82, 82, 37.0, 105.0, 391.0, 729.0], '2500-r-31': [65, 809, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 73, 73, 37.0, 105.0, 391.0, 729.0], '2500-r-25': [79, 740, 37.0, 729.0, 79.0, 499.0, 37.0, 729.0, 335, 335, 37.0, 105.0, 391.0, 729.0], '2500-r-33': [69, 798, 37.0, 729.0, 69.0, 561.0, 37.0, 729.0, 94, 94, 37.0, 105.0, 391.0, 729.0], '2500-r-28': [58, 807, 37.0, 729.0, 58.0, 595.0, 37.0, 729.0, 109, 109, 37.0, 105.0, 391.0, 729.0], '2500-r-30': [71, 772, 37.0, 729.0, 71.0, 546.0, 37.0, 729.0, 196, 196, 37.0, 105.0, 391.0, 729.0], '2500-r-36': [56, 829, 37.0, 729.0, 55.0, 614.0, 37.0, 729.0, 100, 100, 37.0, 105.0, 391.0, 729.0], '2500-r-34': [60, 807, 37.0, 729.0, 58.0, 595.0, 37.0, 729.0, 71, 71, 37.0, 105.0, 391.0, 729.0], '2500-r-27': [56, 821, 37.0, 729.0, 55.0, 614.0, 37.0, 729.0, 52, 52, 37.0, 105.0, 391.0, 729.0], '2500-r-37': [72, 761, 37.0, 729.0, 72.0, 544.0, 37.0, 729.0, 7, 7, 37.0, 105.0, 391.0, 729.0], '2500-r-39': [55, 804, 37.0, 729.0, 55.0, 614.0, 37.0, 729.0, 56, 56, 37.0, 105.0, 391.0, 729.0], '2500-r-38': [61, 817, 37.0, 729.0, 61.0, 582.0, 37.0, 729.0, 104, 104, 37.0, 105.0, 391.0, 729.0], '2500-r-35': [65, 794, 37.0, 729.0, 62.0, 581.0, 37.0, 729.0, 169, 169, 37.0, 105.0, 391.0, 729.0], '2500-r-14': [77, 737, 35.0, 692.0, 77.0, 448.0, 35.0, 694.0, 212, 212, 35.0, 101.0, 369.0, 695.0], '2500-r-10': [83, 760, 31.0, 709.0, 83.0, 458.0, 31.0, 709.0, 320, 320, 31.0, 109.0, 371.0, 710.0], '2500-r-17': [78, 735, 38.0, 713.0, 78.0, 454.0, 38.0, 713.0, 250, 250, 38.0, 110.0, 365.0, 713.0], '2500-r-15': [82, 674, 29.0, 718.0, 82.0, 422.0, 33.0, 663.0, 521, 521, 29.0, 98.0, 382.0, 721.0], '2500-r-32': [83, 726, 40.0, 714.0, 83.0, 450.0, 40.0, 714.0, 261, 261, 40.0, 111.0, 357.0, 714.0], '2500-r-2': [82, 718, 38.0, 760.0, 82.0, 478.0, 42.0, 716.0, 231, 231, 38.0, 112.0, 378.0, 760.0]}


    '''
    #Statistics
    #1. M_t = avg_over_runs(our mistakes - opt mistakes), A_t = avg_over_runs(our abstentions - abst of opt mistake maker)
    #2. Extra abstentions =  avg_over_runs(our abstentions - mistake-matched-abstention)
    '''

    Ts = list( range(250, 2500+250, 250) )
    n_runs = 40 #20 #1 #5 #3 #20
    runs = list(range(n_runs))
    print('\nCompiling results..\n')
    for T in Ts:
        m_t, a_t, extra_a_t, extra_m_t, valid_runs = 0, 0, 0, 0, 0
        for process_id in runs:
           key = str(T) + '-r-' + str(process_id)
           if key in return_stats:
               valid_runs += 1
               stats = return_stats[key]

               algo_error, algo_abstained = stats[0], stats[1]
               optimal_mistakes, optimal_abstained = stats[2], stats[3]
               mma_mis, mistake_matched_abs = stats[4], stats[5]
               amm_mis, amm_abs = stats[6], stats[7]

               m_t += ( algo_error - optimal_mistakes ) 
               a_t += ( algo_abstained - optimal_abstained )
               extra_a_t += ( algo_abstained - mistake_matched_abs )
               extra_m_t += ( algo_error - amm_mis )

        m_t /= valid_runs
        a_t /= valid_runs
        extra_a_t /= valid_runs
        print('\t\tT=', T, ', m_t=', m_t, ', a_t=', a_t, ', extra_a_t=', extra_a_t, ', extra_m_t=', extra_m_t)


    
    compute_error_bars( Ts, runs,  return_stats, label='new-exp-4times-P-' + str(time.time()) )  
